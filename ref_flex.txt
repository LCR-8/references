To designate an element as a flex container, set the element's display property to flex or inline-flex. Once an item is a flex container, there are several properties we can use to specify how its children behave. In this lesson we will cover these properties:

justify-items
align-items
flex-grow
flex-shrink
flex-basis
flex
flex-wrap
align-content
flex-direction
flex-flow


display: flex changes an element to a block-level container with flex items inside of it.
display: inline-flex allows multiple flex containers to appear inline with each other.
justify-items is used to space items along the major axis.
align-items is used to space items along the cross axis.
flex-grow is used to specify how much space (and in what proportions) flex items absorb along the major axis.
flex-shrink is used to specify how much flex items shrink and in what proportions along the major axis.
flex-basis is used to specify the initial size of an element styled with flex-grow and/or flex-shrink.
flex is used to specify flex-grow, flex-shrink, and flex-basis in one declaration.
flex-wrap specifies that elements should shift along the cross axis if the flex container is not large enough.
align-content is used to space rows along the cross axis.
flex-direction is used to specify the major and cross axes.
flex-flow is used to specify flex-wrap and flex-direction in one declaration.
Flex containers can be nested inside of each other by declaring display: flex or display: inline-flex for children of flex containers.


There are two important components to a flexbox layout: flex containers and flex items. A flex container is an element on a page that contains flex items. All direct child elements of a flex container are flex items. This distinction is important because some of the properties you will learn in this lesson apply to flex containers while others apply to flex items

There are five values for the justify-content property:

flex-start — all items will be positioned in order starting, from the left of the parent container, with no extra space between or before them.
flex-end — all items will be positioned in order, with the last item starting on the right side of the parent container, with no extra space between or after them.
center — all items will be positioned in order, in the center of the parent container with no extra space before, between, or after them.
space-around — items will be positioned with equal space before and after each item, resulting in double the space between elements.
space-between — items will be positioned with equal space between them, but no extra space before the first or after the last elements.
In the definitions above, "no extra space" means that margins and borders will be respected, but no more space (than is specified in the style rule for the particular element) will be added between elements. The size of each individual flex item is not changed by this property.

EXEMPLE DE DISTRIBUTION PAR JUSTIFY-CONTENT:
=============================================

INDEX.HTML/===
<!DOCTYPE html>
<html>

<head>
  <title>Flex Justify</title>
  <link href="style.css" type="text/css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css?family=Roboto+Mono" rel="stylesheet">
</head>

<body>
  <h1>Flex Start</h1>
  <div class="container" id="flexstart">
    <div class="box"></div>
    <div class="box"></div>
    <div class="box"></div>
  </div>
  <h1>Flex End</h1>
  <div class="container" id="flexend">
    <div class="box"></div>
    <div class="box"></div>
    <div class="box"></div>
  </div>
  <h1>Center</h1>
  <div class="container" id="center">
    <div class="box"></div>
    <div class="box"></div>
    <div class="box"></div>
  </div>
  <h1>Space Around</h1>
  <div class="container" id="spacearound">
    <div class="box"></div>
    <div class="box"></div>
    <div class="box"></div>
  </div>
  <h1>Space Between</h1>
  <div class="container" id="spacebetween">
    <div class="box"></div>
    <div class="box"></div>
    <div class="box"></div>
  </div>
</body>

</html>

INDEX/===
CSS/====
body {
  border: 0;
  margin: 0;
  font-family: 'Roboto Mono', monospace;
}

h1 {
  text-align: center;
  display: block;
  font-size: 18px;
}

.container {
  height: 150px;
  width: 100%;
  display: flex;
  background-color: whitesmoke;
}

.box {
  height: 75px;
  width: 100px;
  background-color: dodgerblue;
  border: 1px solid lightgrey;
  display: inline-block;
}

#flexstart {
	justify-content: flex-start;
}

#flexend {
	justify-content: flex-end;
}

#center {
	justify-content: center;
}

#spacearound {
	justify-content: space-around;
}

#spacebetween {
	justify-content: space-between;
}
====/CSS


ALIGN-ITEM
============
There are five values we can use for the align-items property:

flex-start — all elements will be positioned at the top of the parent container.
flex-end — all elements will be positioned at the bottom of the parent container.
center — the center of all elements will be positioned halfway between the top and bottom of the parent container.
baseline — the bottom of the content of all items will be aligned with each other.
stretch — if possible, the items will stretch from top to bottom of the container (this is the default value; elements with a specified height will not stretch; elements with a minimum height or no height specified will stretch).
These five values tell the elements how to behave along the cross axis of the parent container.


FLEX-GROW
==============
default value of flex-shrink is 1
default value of flex-grow is 0.

 flex items shrank when the flex container was too small, even though we had not declared the property. This is because the default value of flex-shrink is 1. However, flex items do not grow unless the flex-grow property is declared because the default value of flex-grow is 0.


FLEX
=====
.big {
  flex: 2 1 150px;
}

.small {
  flex: 1 2 100px;
}
In the example above, we use the flex property to declare the values for flex-grow, flex-shrink, and flex-basis (in that order) all in one line.

FLEX_WRAP
=========
The flex-wrap property can accept three values:

wrap — child elements of a flex container will move down to the next line starting from the final item and working towards the first.
nowrap — prevents items from wrapping; this is the default value and is only necessary to override a wrap value set by a different CSS rule.
wrap-reverse — the wrapped element is displayed on top of the other elements in the flex container starting from the last and working toward the first (a mirror image of the wrap value).


ALIGN-CONTENT
================
align-items is for aligning elements within a single row. If a flex container has multiple rows of content, we can use align-content to space the rows from top to bottom.

align-content accepts six values:

flex-start — all rows of elements will be positioned at the top of the parent container with no extra space between.
flex-end — all rows of elements will be positioned at the bottom of the parent container with no extra space between.
center — all rows of elements will be positioned at the center of the parent element with no extra space between.
space-between — all rows of elements will be spaced evenly from the top to the bottom of the container with no space above the first or below the last.
space-around — all rows of elements will be spaced evenly from the top to the bottom of the container with the same amount of space at the top and bottom and between each element.
stretch — if a minimum height or no height is specified, the rows of elements will stretch to fill the parent container from top to bottom (default value).

The align-content property is declared on flex containers.



The major axis is used to position flex items with the following properties:

justify-content
flex-wrap
flex-grow
flex-shrink
The cross axis is used to position flex items with the following properties:

align-items
align-content
